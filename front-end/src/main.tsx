import './App.css'
import React from 'react';
import ReactDOM from 'react-dom/client';
import { RouterProvider, createRouter } from '@tanstack/react-router';

// Import the auto-generated route tree
import { routeTree } from './routeTree.gen'; // This file will be generated by the plugin!

// Create a new router instance
const router = createRouter({ routeTree });

// Register the router instance for type safety (IMPORTANT for TypeScript!)
declare module '@tanstack/react-router' {
  interface Register {
    router: typeof router;
  }
}

const rootElement = document.getElementById('root');
if (!rootElement) throw new Error('Failed to find the root element');

const root = ReactDOM.createRoot(rootElement);
root.render(
  <React.StrictMode>
    <RouterProvider router={router} />
  </React.StrictMode>
);











// ///////////////////////////////////////////////////////
// // src/main.tsx
// import React from 'react';
// import ReactDOM from 'react-dom/client';
// import { RouterProvider } from '@tanstack/react-router';
// import { router } from './router';
// import { AuthProvider, useAuth } from './AuthContext';
// import './index.css';

// // Create a wrapper component to provide the auth context to the router
// function AppWrapper() {
//   const auth = useAuth(); // Get the auth context values
//   // The context prop of RouterProvider is where you pass the values
//   return <RouterProvider router={router} context={{ auth }} />;
// }

// ReactDOM.createRoot(document.getElementById('root')!).render( // Non-null assertion for root element
//   <React.StrictMode>
//     {/* AuthProvider wraps the RouterProvider to make auth context available */}
//     <AuthProvider>
//       <AppWrapper />
//     </AuthProvider>
//   </React.StrictMode>,
// );